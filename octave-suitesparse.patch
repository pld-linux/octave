--- octave-4.4.1/libinterp/dldfcn/amd.cc.orig	2022-12-13 17:04:01.004166646 +0100
+++ octave-4.4.1/libinterp/dldfcn/amd.cc	2022-12-13 17:08:34.869349658 +0100
@@ -145,11 +145,11 @@ The author of the code itself is Timothy
 
   // FIXME: how can we manage the memory allocation of amd
   //        in a cleaner manner?
-  SUITESPARSE_ASSIGN_FPTR (malloc_func, amd_malloc, malloc);
-  SUITESPARSE_ASSIGN_FPTR (free_func, amd_free, free);
-  SUITESPARSE_ASSIGN_FPTR (calloc_func, amd_calloc, calloc);
-  SUITESPARSE_ASSIGN_FPTR (realloc_func, amd_realloc, realloc);
-  SUITESPARSE_ASSIGN_FPTR (printf_func, amd_printf, printf);
+  SUITESPARSE_ASSIGN_FPTR (malloc_func, SuiteSparse_config.malloc_func, malloc);
+  SUITESPARSE_ASSIGN_FPTR (free_func, SuiteSparse_config.free_func, free);
+  SUITESPARSE_ASSIGN_FPTR (calloc_func, SuiteSparse_config.calloc_func, calloc);
+  SUITESPARSE_ASSIGN_FPTR (realloc_func, SuiteSparse_config.realloc_func, realloc);
+  SUITESPARSE_ASSIGN_FPTR (printf_func, SuiteSparse_config.printf_func, printf);
 
   octave_idx_type result = AMD_NAME (_order) (n_col, cidx, ridx, P, Control,
                                               Info);
--- octave-4.4.1/libinterp/dldfcn/symbfact.cc.orig	2022-12-13 17:04:01.004166646 +0100
+++ octave-4.4.1/libinterp/dldfcn/symbfact.cc	2022-12-13 18:01:57.182001243 +0100
@@ -213,17 +213,17 @@ Cholesky@tie{}factorization as determine
   if (spu == 0.)
     {
       cm->print = -1;
-      SUITESPARSE_ASSIGN_FPTR (printf_func, cm->print_function, nullptr);
+      SUITESPARSE_ASSIGN_FPTR (printf_func, SuiteSparse_config.printf_func, nullptr);
     }
   else
     {
       cm->print = static_cast<int> (spu) + 2;
-      SUITESPARSE_ASSIGN_FPTR (printf_func, cm->print_function, &SparseCholPrint);
+      SUITESPARSE_ASSIGN_FPTR (printf_func, SuiteSparse_config.printf_func, &SparseCholPrint);
     }
 
   cm->error_handler = &SparseCholError;
-  SUITESPARSE_ASSIGN_FPTR2 (divcomplex_func, cm->complex_divide, divcomplex);
-  SUITESPARSE_ASSIGN_FPTR2 (hypot_func, cm->hypotenuse, hypot);
+  SUITESPARSE_ASSIGN_FPTR2 (divcomplex_func, SuiteSparse_config.divcomplex_func, divcomplex);
+  SUITESPARSE_ASSIGN_FPTR2 (hypot_func, SuiteSparse_config.hypot_func, hypot);
 
   cholmod_sparse *F = CHOLMOD_NAME(transpose) (A, 0, cm);
   cholmod_sparse *Aup, *Alo;
--- octave-4.4.1/liboctave/array/CSparse.cc.orig	2022-12-13 17:04:01.057499691 +0100
+++ octave-4.4.1/liboctave/array/CSparse.cc	2022-12-13 18:36:30.070771441 +0100
@@ -5690,17 +5690,17 @@ SparseComplexMatrix::fsolve (MatrixType&
           if (spu == 0.)
             {
               cm->print = -1;
-              SUITESPARSE_ASSIGN_FPTR (printf_func, cm->print_function, nullptr);
+              SUITESPARSE_ASSIGN_FPTR (printf_func, SuiteSparse_config.printf_func, nullptr);
             }
           else
             {
               cm->print = static_cast<int> (spu) + 2;
-              SUITESPARSE_ASSIGN_FPTR (printf_func, cm->print_function, &SparseCholPrint);
+              SUITESPARSE_ASSIGN_FPTR (printf_func, SuiteSparse_config.printf_func, &SparseCholPrint);
             }
 
           cm->error_handler = &SparseCholError;
-          SUITESPARSE_ASSIGN_FPTR2 (divcomplex_func, cm->complex_divide, divcomplex);
-          SUITESPARSE_ASSIGN_FPTR2 (hypot_func, cm->hypotenuse, hypot);
+          SUITESPARSE_ASSIGN_FPTR2 (divcomplex_func, SuiteSparse_config.divcomplex_func, divcomplex);
+          SUITESPARSE_ASSIGN_FPTR2 (hypot_func, SuiteSparse_config.hypot_func, hypot);
 
           cm->final_ll = true;
 
@@ -5942,17 +5942,17 @@ SparseComplexMatrix::fsolve (MatrixType&
           if (spu == 0.)
             {
               cm->print = -1;
-              SUITESPARSE_ASSIGN_FPTR (printf_func, cm->print_function, nullptr);
+              SUITESPARSE_ASSIGN_FPTR (printf_func, SuiteSparse_config.printf_func, nullptr);
             }
           else
             {
               cm->print = static_cast<int> (spu) + 2;
-              SUITESPARSE_ASSIGN_FPTR (printf_func, cm->print_function, &SparseCholPrint);
+              SUITESPARSE_ASSIGN_FPTR (printf_func, SuiteSparse_config.printf_func, &SparseCholPrint);
             }
 
           cm->error_handler = &SparseCholError;
-          SUITESPARSE_ASSIGN_FPTR2 (divcomplex_func, cm->complex_divide, divcomplex);
-          SUITESPARSE_ASSIGN_FPTR2 (hypot_func, cm->hypotenuse, hypot);
+          SUITESPARSE_ASSIGN_FPTR2 (divcomplex_func, SuiteSparse_config.divcomplex_func, divcomplex);
+          SUITESPARSE_ASSIGN_FPTR2 (hypot_func, SuiteSparse_config.hypot_func, hypot);
 
           cm->final_ll = true;
 
@@ -6245,17 +6245,17 @@ SparseComplexMatrix::fsolve (MatrixType&
           if (spu == 0.)
             {
               cm->print = -1;
-              SUITESPARSE_ASSIGN_FPTR (printf_func, cm->print_function, nullptr);
+              SUITESPARSE_ASSIGN_FPTR (printf_func, SuiteSparse_config.printf_func, nullptr);
             }
           else
             {
               cm->print = static_cast<int> (spu) + 2;
-              SUITESPARSE_ASSIGN_FPTR (printf_func, cm->print_function, &SparseCholPrint);
+              SUITESPARSE_ASSIGN_FPTR (printf_func, SuiteSparse_config.printf_func, &SparseCholPrint);
             }
 
           cm->error_handler = &SparseCholError;
-          SUITESPARSE_ASSIGN_FPTR2 (divcomplex_func, cm->complex_divide, divcomplex);
-          SUITESPARSE_ASSIGN_FPTR2 (hypot_func, cm->hypotenuse, hypot);
+          SUITESPARSE_ASSIGN_FPTR2 (divcomplex_func, SuiteSparse_config.divcomplex_func, divcomplex);
+          SUITESPARSE_ASSIGN_FPTR2 (hypot_func, SuiteSparse_config.hypot_func, hypot);
 
           cm->final_ll = true;
 
@@ -6476,17 +6476,17 @@ SparseComplexMatrix::fsolve (MatrixType&
           if (spu == 0.)
             {
               cm->print = -1;
-              SUITESPARSE_ASSIGN_FPTR (printf_func, cm->print_function, nullptr);
+              SUITESPARSE_ASSIGN_FPTR (printf_func, SuiteSparse_config.printf_func, nullptr);
             }
           else
             {
               cm->print = static_cast<int> (spu) + 2;
-              SUITESPARSE_ASSIGN_FPTR (printf_func, cm->print_function, &SparseCholPrint);
+              SUITESPARSE_ASSIGN_FPTR (printf_func, SuiteSparse_config.printf_func, &SparseCholPrint);
             }
 
           cm->error_handler = &SparseCholError;
-          SUITESPARSE_ASSIGN_FPTR2 (divcomplex_func, cm->complex_divide, divcomplex);
-          SUITESPARSE_ASSIGN_FPTR2 (hypot_func, cm->hypotenuse, hypot);
+          SUITESPARSE_ASSIGN_FPTR2 (divcomplex_func, SuiteSparse_config.divcomplex_func, divcomplex);
+          SUITESPARSE_ASSIGN_FPTR2 (hypot_func, SuiteSparse_config.hypot_func, hypot);
 
           cm->final_ll = true;
 
--- octave-4.4.1/liboctave/array/dSparse.cc.orig	2022-12-13 17:04:01.147499203 +0100
+++ octave-4.4.1/liboctave/array/dSparse.cc	2022-12-13 19:11:04.622865962 +0100
@@ -5731,17 +5731,17 @@ SparseMatrix::fsolve (MatrixType& mattyp
           if (spu == 0.)
             {
               cm->print = -1;
-              SUITESPARSE_ASSIGN_FPTR (printf_func, cm->print_function, nullptr);
+              SUITESPARSE_ASSIGN_FPTR (printf_func, SuiteSparse_config.printf_func, nullptr);
             }
           else
             {
               cm->print = static_cast<int> (spu) + 2;
-              SUITESPARSE_ASSIGN_FPTR (printf_func, cm->print_function, &SparseCholPrint);
+              SUITESPARSE_ASSIGN_FPTR (printf_func, SuiteSparse_config.printf_func, &SparseCholPrint);
             }
 
           cm->error_handler = &SparseCholError;
-          SUITESPARSE_ASSIGN_FPTR2 (divcomplex_func, cm->complex_divide, divcomplex);
-          SUITESPARSE_ASSIGN_FPTR2 (hypot_func, cm->hypotenuse, hypot);
+          SUITESPARSE_ASSIGN_FPTR2 (divcomplex_func, SuiteSparse_config.divcomplex_func, divcomplex);
+          SUITESPARSE_ASSIGN_FPTR2 (hypot_func, SuiteSparse_config.hypot_func, hypot);
 
           cm->final_ll = true;
 
@@ -5956,17 +5956,17 @@ SparseMatrix::fsolve (MatrixType& mattyp
           if (spu == 0.)
             {
               cm->print = -1;
-              SUITESPARSE_ASSIGN_FPTR (printf_func, cm->print_function, nullptr);
+              SUITESPARSE_ASSIGN_FPTR (printf_func, SuiteSparse_config.printf_func, nullptr);
             }
           else
             {
               cm->print = static_cast<int> (spu) + 2;
-              SUITESPARSE_ASSIGN_FPTR (printf_func, cm->print_function, &SparseCholPrint);
+              SUITESPARSE_ASSIGN_FPTR (printf_func, SuiteSparse_config.printf_func, &SparseCholPrint);
             }
 
           cm->error_handler = &SparseCholError;
-          SUITESPARSE_ASSIGN_FPTR2 (divcomplex_func, cm->complex_divide, divcomplex);
-          SUITESPARSE_ASSIGN_FPTR2 (hypot_func, cm->hypotenuse, hypot);
+          SUITESPARSE_ASSIGN_FPTR2 (divcomplex_func, SuiteSparse_config.divcomplex_func, divcomplex);
+          SUITESPARSE_ASSIGN_FPTR2 (hypot_func, SuiteSparse_config.hypot_func, hypot);
 
           cm->final_ll = true;
 
@@ -6229,17 +6229,17 @@ SparseMatrix::fsolve (MatrixType& mattyp
           if (spu == 0.)
             {
               cm->print = -1;
-              SUITESPARSE_ASSIGN_FPTR (printf_func, cm->print_function, nullptr);
+              SUITESPARSE_ASSIGN_FPTR (printf_func, SuiteSparse_config.printf_func, nullptr);
             }
           else
             {
               cm->print = static_cast<int> (spu) + 2;
-              SUITESPARSE_ASSIGN_FPTR (printf_func, cm->print_function, &SparseCholPrint);
+              SUITESPARSE_ASSIGN_FPTR (printf_func, SuiteSparse_config.printf_func, &SparseCholPrint);
             }
 
           cm->error_handler = &SparseCholError;
-          SUITESPARSE_ASSIGN_FPTR2 (divcomplex_func, cm->complex_divide, divcomplex);
-          SUITESPARSE_ASSIGN_FPTR2 (hypot_func, cm->hypotenuse, hypot);
+          SUITESPARSE_ASSIGN_FPTR2 (divcomplex_func, SuiteSparse_config.divcomplex_func, divcomplex);
+          SUITESPARSE_ASSIGN_FPTR2 (hypot_func, SuiteSparse_config.hypot_func, hypot);
 
           cm->final_ll = true;
 
@@ -6474,17 +6474,17 @@ SparseMatrix::fsolve (MatrixType& mattyp
           if (spu == 0.)
             {
               cm->print = -1;
-              SUITESPARSE_ASSIGN_FPTR (printf_func, cm->print_function, nullptr);
+              SUITESPARSE_ASSIGN_FPTR (printf_func, SuiteSparse_config.printf_func, nullptr);
             }
           else
             {
               cm->print = static_cast<int> (spu) + 2;
-              SUITESPARSE_ASSIGN_FPTR (printf_func, cm->print_function, &SparseCholPrint);
+              SUITESPARSE_ASSIGN_FPTR (printf_func, SuiteSparse_config.printf_func, &SparseCholPrint);
             }
 
           cm->error_handler = &SparseCholError;
-          SUITESPARSE_ASSIGN_FPTR2 (divcomplex_func, cm->complex_divide, divcomplex);
-          SUITESPARSE_ASSIGN_FPTR2 (hypot_func, cm->hypotenuse, hypot);
+          SUITESPARSE_ASSIGN_FPTR2 (divcomplex_func, SuiteSparse_config.divcomplex_func, divcomplex);
+          SUITESPARSE_ASSIGN_FPTR2 (hypot_func, SuiteSparse_config.hypot_func, hypot);
 
           cm->final_ll = true;
 
--- octave-4.4.1/liboctave/numeric/sparse-chol.cc.orig	2022-12-13 17:04:01.190832302 +0100
+++ octave-4.4.1/liboctave/numeric/sparse-chol.cc	2022-12-13 19:12:31.662394428 +0100
@@ -234,21 +234,21 @@ namespace octave
       if (spu == 0.)
         {
           cm->print = -1;
-          SUITESPARSE_ASSIGN_FPTR (printf_func, cm->print_function, nullptr);
+          SUITESPARSE_ASSIGN_FPTR (printf_func, SuiteSparse_config.printf_func, nullptr);
         }
       else
         {
           cm->print = static_cast<int> (spu) + 2;
-          SUITESPARSE_ASSIGN_FPTR (printf_func, cm->print_function,
+          SUITESPARSE_ASSIGN_FPTR (printf_func, SuiteSparse_config.printf_func,
                                    &SparseCholPrint);
         }
 
       cm->error_handler = &SparseCholError;
 
-      SUITESPARSE_ASSIGN_FPTR2 (divcomplex_func, cm->complex_divide,
+      SUITESPARSE_ASSIGN_FPTR2 (divcomplex_func, SuiteSparse_config.divcomplex_func,
                                 divcomplex);
 
-      SUITESPARSE_ASSIGN_FPTR2 (hypot_func, cm->hypotenuse, hypot);
+      SUITESPARSE_ASSIGN_FPTR2 (hypot_func, SuiteSparse_config.hypot_func, hypot);
 
       cm->final_asis = false;
       cm->final_super = false;
